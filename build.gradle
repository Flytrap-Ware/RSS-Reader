plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco' // code coverage
}

group = 'com.flytrap'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')

}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // sql-lite
    implementation 'org.xerial:sqlite-jdbc:3.43.2.2'
    implementation('org.hibernate.orm:hibernate-community-dialects:6.1.7.Final')
    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation("it.ozimov:embedded-redis:0.7.2")
    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    }
}


/* Submodule start */
processResources.dependsOn('submodules')

tasks.register('submodules', Copy) {
    description = 'Copy submodules to project'

    from('./submodules') {
        include('*.yml')
    }
    into('src/main/resources')
}

tasks.named('test') {
    useJUnitPlatform()
}

/* Jacoco */
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
