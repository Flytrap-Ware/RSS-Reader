import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.*
import static org.hamcrest.Matchers.*
import net.grinder.script.GTest
import net.grinder.script.Grinder
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread

// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3
import org.junit.Before
import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith

import org.ngrinder.http.HTTPRequest
import org.ngrinder.http.HTTPRequestControl
import org.ngrinder.http.HTTPResponse
import org.ngrinder.http.cookie.Cookie
import org.ngrinder.http.cookie.CookieManager

/**
 * A simple example using the HTTP plugin that shows the retrieval of a single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class LoginAllPostTest {

    public static GTest test
    public static HTTPRequest request
    public static Map<String, String> headers = [:]
    public static String body = "{\n    \"code\": \"파리지옥-이린-감자-에이프-지니-듀이_20230316\"\n}"
    public static List<Cookie> cookies = []

    @BeforeProcess
    public static void beforeProcess() {
        HTTPRequestControl.setConnectionTimeout(300000)
        test = new GTest(1, "127.0.0.1")
        request = new HTTPRequest()

        // Set header data
        headers.put("Content-Type", "application/json")
        grinder.logger.info("before process.")
    }

    @BeforeThread
    public void beforeThread() {
        test.record(this, "test")
        grinder.statistics.delayReports = true
        grinder.logger.info("before thread.")
    }

    @Before
    public void before() {
        request.setHeaders(headers)
        CookieManager.addCookies(cookies)
        grinder.logger.info("before. init headers and cookies")
    }

    // 로그인 -> 랜덤한 포스트 페이지 요청(다양한 필터링)
    @Test
    public void test() {
        HTTPResponse response = request.POST("http://127.0.0.1:8080/api/admin/login", body.getBytes("UTF-8"))

        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(201))
        }
        String frontURL = "http://127.0.0.1:8080/posts?read=false"
        String middleURL = "&start=0&end=9999999999999"
      //  String backURL = "&page="
        String url = frontURL + middleURL;

        request.GET(url)
    }

    class RandomPostIdIssuer {

        private static int NUMBER_LENGTH = 4;
        private static int NUMBER_BOUND = 10;

        public static String getRandomNumbers() {
            Random random = new Random();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < NUMBER_LENGTH; i++) {
                sb.append(String.valueOf(random.nextInt(NUMBER_BOUND)));
            }
            String temp = sb.toString()
            if (temp.charAt(0) == "0") {
                return RandomPostIdIssuer.getRandomNumbers();
            }
            return temp;
        }
    }

    class RandomPubDate {

        private static int NUMBER_LENGTH = 0
        private static int NUMBER_BOUND = 9999999999999;

        public static String getRandomNumbers() {
            Random random = new Random();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < NUMBER_LENGTH; i++) {
                sb.append(String.valueOf(random.nextInt(NUMBER_BOUND)));
            }
            String temp = sb.toString()
            if (temp.charAt(0) == "0") {
                return RandomPubDate.getRandomNumbers();
            }
            return temp;
        }
    }
}
